# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: rsocola
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: citamedica
# "service" is the name of this project. This will also be added to your AWS resource names.
service: RimacReto

stages:
  default:
    params:
      tableName: "register-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    REGISTER_TABLE: ${param:tableName}
    TOPIC_ARN: !Ref Topic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource:
            - Fn::GetAtt:
              - RegisterTable
              - Arn
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref Topic
  memorySize: 512
  timeout: 15
  
plugins:
  - serverless-plugin-typescript 
  

functions:
  Appointment:
    handler: services/appointment.handler
    events:
      - sns:
          arn:
            Ref: Topic
          topicName: my-topic
      - httpApi:
          path: /register
          method: post
  Appointment_PE_Consumer:
    handler: services/appointment_pe.handler
    events:
      - sqs:
          arn:
          Fn::GetAtt:
            - MyQueueOne
            - Arn
  Appointment_CL_Consumer:
    handler: services/appointment_cl.handler
    events:
      - sqs:
          arn:
          Fn::GetAtt:
            - MyQueueTwo
            - Arn          


resources:
  Resources:
    RegisterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
            
    Topic:
      Type: AWS::SNS::Topic
      Properties:
        topicName: my-topic
    
    MyQueueOne:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: my-queue-one
    MyQueueTwo:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: my-queue-two

    MySubcriptionOne:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref MyTopic
        Protocol: sqs
        Endpoint: !GetAtt MyQueueOne.Arn
    MySubcriptionTwo:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref MyTopic
        Protocol: sqs
        Endpoint: !GetAtt MyQueueTwo.Arn
    
    QueueOnePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref MyQueueOne
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt MyQueueOne.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref MyTopic

    QueueTwoPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref MyQueueTwo
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: !GetAtt MyQueueTwo.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref MyTopic